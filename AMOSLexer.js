// Generated from AMOS.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,52,357,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
2,49,7,49,2,50,7,50,2,51,7,51,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,
2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,
8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
11,3,11,150,8,11,1,11,4,11,153,8,11,11,11,12,11,154,1,12,1,12,1,12,1,12,
1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,5,15,174,
8,15,10,15,12,15,177,9,15,1,15,1,15,1,16,4,16,182,8,16,11,16,12,16,183,1,
16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,
1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,21,1,
21,5,21,216,8,21,10,21,12,21,219,9,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,
1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,
26,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,
1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,
32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,
1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,
36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,
1,37,1,38,1,38,5,38,318,8,38,10,38,12,38,321,9,38,1,39,1,39,1,39,1,39,1,
39,1,39,1,39,1,39,1,39,3,39,332,8,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,
1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,
50,1,51,1,51,0,0,52,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,
47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,
71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,
95,48,97,49,99,50,101,51,103,52,1,0,6,1,0,48,57,2,0,10,10,13,13,3,0,9,10,
13,13,32,32,1,0,34,34,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
367,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,
0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,
57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,
0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,
1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,
0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,
0,0,0,0,103,1,0,0,0,1,105,1,0,0,0,3,109,1,0,0,0,5,113,1,0,0,0,7,117,1,0,
0,0,9,119,1,0,0,0,11,123,1,0,0,0,13,126,1,0,0,0,15,129,1,0,0,0,17,131,1,
0,0,0,19,134,1,0,0,0,21,136,1,0,0,0,23,149,1,0,0,0,25,156,1,0,0,0,27,163,
1,0,0,0,29,169,1,0,0,0,31,171,1,0,0,0,33,181,1,0,0,0,35,187,1,0,0,0,37,196,
1,0,0,0,39,204,1,0,0,0,41,208,1,0,0,0,43,213,1,0,0,0,45,222,1,0,0,0,47,225,
1,0,0,0,49,230,1,0,0,0,51,234,1,0,0,0,53,237,1,0,0,0,55,242,1,0,0,0,57,245,
1,0,0,0,59,250,1,0,0,0,61,257,1,0,0,0,63,263,1,0,0,0,65,268,1,0,0,0,67,273,
1,0,0,0,69,283,1,0,0,0,71,292,1,0,0,0,73,296,1,0,0,0,75,305,1,0,0,0,77,315,
1,0,0,0,79,331,1,0,0,0,81,333,1,0,0,0,83,335,1,0,0,0,85,337,1,0,0,0,87,339,
1,0,0,0,89,341,1,0,0,0,91,343,1,0,0,0,93,345,1,0,0,0,95,347,1,0,0,0,97,349,
1,0,0,0,99,351,1,0,0,0,101,353,1,0,0,0,103,355,1,0,0,0,105,106,5,69,0,0,
106,107,5,110,0,0,107,108,5,100,0,0,108,2,1,0,0,0,109,110,5,83,0,0,110,111,
5,105,0,0,111,112,5,110,0,0,112,4,1,0,0,0,113,114,5,67,0,0,114,115,5,111,
0,0,115,116,5,115,0,0,116,6,1,0,0,0,117,118,5,61,0,0,118,8,1,0,0,0,119,120,
5,68,0,0,120,121,5,105,0,0,121,122,5,109,0,0,122,10,1,0,0,0,123,124,5,60,
0,0,124,125,5,62,0,0,125,12,1,0,0,0,126,127,5,62,0,0,127,128,5,61,0,0,128,
14,1,0,0,0,129,130,5,62,0,0,130,16,1,0,0,0,131,132,5,60,0,0,132,133,5,61,
0,0,133,18,1,0,0,0,134,135,5,60,0,0,135,20,1,0,0,0,136,137,5,83,0,0,137,
138,5,99,0,0,138,139,5,114,0,0,139,140,5,101,0,0,140,141,5,101,0,0,141,142,
5,110,0,0,142,143,5,32,0,0,143,144,5,79,0,0,144,145,5,112,0,0,145,146,5,
101,0,0,146,147,5,110,0,0,147,22,1,0,0,0,148,150,5,45,0,0,149,148,1,0,0,
0,149,150,1,0,0,0,150,152,1,0,0,0,151,153,7,0,0,0,152,151,1,0,0,0,153,154,
1,0,0,0,154,152,1,0,0,0,154,155,1,0,0,0,155,24,1,0,0,0,156,157,5,76,0,0,
157,158,5,111,0,0,158,159,5,119,0,0,159,160,5,114,0,0,160,161,5,101,0,0,
161,162,5,115,0,0,162,26,1,0,0,0,163,164,5,72,0,0,164,165,5,105,0,0,165,
166,5,114,0,0,166,167,5,101,0,0,167,168,5,115,0,0,168,28,1,0,0,0,169,170,
5,44,0,0,170,30,1,0,0,0,171,175,5,39,0,0,172,174,8,1,0,0,173,172,1,0,0,0,
174,177,1,0,0,0,175,173,1,0,0,0,175,176,1,0,0,0,176,178,1,0,0,0,177,175,
1,0,0,0,178,179,6,15,0,0,179,32,1,0,0,0,180,182,7,2,0,0,181,180,1,0,0,0,
182,183,1,0,0,0,183,181,1,0,0,0,183,184,1,0,0,0,184,185,1,0,0,0,185,186,
6,16,0,0,186,34,1,0,0,0,187,188,5,67,0,0,188,189,5,117,0,0,189,190,5,114,
0,0,190,191,5,115,0,0,191,192,5,32,0,0,192,193,5,79,0,0,193,194,5,102,0,
0,194,195,5,102,0,0,195,36,1,0,0,0,196,197,5,67,0,0,197,198,5,117,0,0,198,
199,5,114,0,0,199,200,5,115,0,0,200,201,5,32,0,0,201,202,5,79,0,0,202,203,
5,110,0,0,203,38,1,0,0,0,204,205,5,73,0,0,205,206,5,110,0,0,206,207,5,107,
0,0,207,40,1,0,0,0,208,209,5,84,0,0,209,210,5,101,0,0,210,211,5,120,0,0,
211,212,5,116,0,0,212,42,1,0,0,0,213,217,5,34,0,0,214,216,8,3,0,0,215,214,
1,0,0,0,216,219,1,0,0,0,217,215,1,0,0,0,217,218,1,0,0,0,218,220,1,0,0,0,
219,217,1,0,0,0,220,221,5,34,0,0,221,44,1,0,0,0,222,223,5,68,0,0,223,224,
5,111,0,0,224,46,1,0,0,0,225,226,5,76,0,0,226,227,5,111,0,0,227,228,5,111,
0,0,228,229,5,112,0,0,229,48,1,0,0,0,230,231,5,70,0,0,231,232,5,111,0,0,
232,233,5,114,0,0,233,50,1,0,0,0,234,235,5,84,0,0,235,236,5,111,0,0,236,
52,1,0,0,0,237,238,5,78,0,0,238,239,5,101,0,0,239,240,5,120,0,0,240,241,
5,116,0,0,241,54,1,0,0,0,242,243,5,73,0,0,243,244,5,102,0,0,244,56,1,0,0,
0,245,246,5,69,0,0,246,247,5,108,0,0,247,248,5,115,0,0,248,249,5,101,0,0,
249,58,1,0,0,0,250,251,5,69,0,0,251,252,5,110,0,0,252,253,5,100,0,0,253,
254,5,32,0,0,254,255,5,73,0,0,255,256,5,102,0,0,256,60,1,0,0,0,257,258,5,
87,0,0,258,259,5,104,0,0,259,260,5,105,0,0,260,261,5,108,0,0,261,262,5,101,
0,0,262,62,1,0,0,0,263,264,5,87,0,0,264,265,5,101,0,0,265,266,5,110,0,0,
266,267,5,100,0,0,267,64,1,0,0,0,268,269,5,80,0,0,269,270,5,108,0,0,270,
271,5,97,0,0,271,272,5,121,0,0,272,66,1,0,0,0,273,274,5,80,0,0,274,275,5,
114,0,0,275,276,5,111,0,0,276,277,5,99,0,0,277,278,5,101,0,0,278,279,5,100,
0,0,279,280,5,117,0,0,280,281,5,114,0,0,281,282,5,101,0,0,282,68,1,0,0,0,
283,284,5,69,0,0,284,285,5,110,0,0,285,286,5,100,0,0,286,287,5,32,0,0,287,
288,5,80,0,0,288,289,5,114,0,0,289,290,5,111,0,0,290,291,5,99,0,0,291,70,
1,0,0,0,292,293,5,66,0,0,293,294,5,97,0,0,294,295,5,114,0,0,295,72,1,0,0,
0,296,297,5,87,0,0,297,298,5,97,0,0,298,299,5,105,0,0,299,300,5,116,0,0,
300,301,5,32,0,0,301,302,5,75,0,0,302,303,5,101,0,0,303,304,5,121,0,0,304,
74,1,0,0,0,305,306,5,75,0,0,306,307,5,101,0,0,307,308,5,121,0,0,308,309,
5,32,0,0,309,310,5,83,0,0,310,311,5,116,0,0,311,312,5,97,0,0,312,313,5,116,
0,0,313,314,5,101,0,0,314,76,1,0,0,0,315,319,7,4,0,0,316,318,7,5,0,0,317,
316,1,0,0,0,318,321,1,0,0,0,319,317,1,0,0,0,319,320,1,0,0,0,320,78,1,0,0,
0,321,319,1,0,0,0,322,332,5,61,0,0,323,324,5,60,0,0,324,332,5,62,0,0,325,
326,5,62,0,0,326,332,5,61,0,0,327,332,5,62,0,0,328,329,5,60,0,0,329,332,
5,61,0,0,330,332,5,60,0,0,331,322,1,0,0,0,331,323,1,0,0,0,331,325,1,0,0,
0,331,327,1,0,0,0,331,328,1,0,0,0,331,330,1,0,0,0,332,80,1,0,0,0,333,334,
5,40,0,0,334,82,1,0,0,0,335,336,5,41,0,0,336,84,1,0,0,0,337,338,5,91,0,0,
338,86,1,0,0,0,339,340,5,93,0,0,340,88,1,0,0,0,341,342,5,123,0,0,342,90,
1,0,0,0,343,344,5,125,0,0,344,92,1,0,0,0,345,346,5,36,0,0,346,94,1,0,0,0,
347,348,5,42,0,0,348,96,1,0,0,0,349,350,5,47,0,0,350,98,1,0,0,0,351,352,
5,43,0,0,352,100,1,0,0,0,353,354,5,45,0,0,354,102,1,0,0,0,355,356,5,58,0,
0,356,104,1,0,0,0,8,0,149,154,175,183,217,319,331,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class AMOSLexer extends antlr4.Lexer {

    static grammarFileName = "AMOS.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'End'", "'Sin'", "'Cos'", "'='", "'Dim'", 
                         "'<>'", "'>='", "'>'", "'<='", "'<'", "'Screen Open'", 
                         null, "'Lowres'", "'Hires'", "','", null, null, 
                         "'Curs Off'", "'Curs On'", "'Ink'", "'Text'", null, 
                         "'Do'", "'Loop'", "'For'", "'To'", "'Next'", "'If'", 
                         "'Else'", "'End If'", "'While'", "'Wend'", "'Play'", 
                         "'Procedure'", "'End Proc'", "'Bar'", "'Wait Key'", 
                         "'Key State'", null, null, "'('", "')'", "'['", 
                         "']'", "'{'", "'}'", "'$'", "'*'", "'/'", "'+'", 
                         "'-'", "':'" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, "SCREENOPEN", "NUMBER", "LOWRES", 
                          "HIRES", "COMMA", "COMMENT", "WS", "CURSOFF", 
                          "CURSON", "INK", "TEXT", "STRING", "DO", "LOOP", 
                          "FOR", "TO", "NEXT", "IF", "ELSE", "ENDIF", "WHILE", 
                          "WEND", "PLAY", "PROC", "ENDPROC", "BAR", "WAITKEY", 
                          "KEYSTATE", "IDENTIFIER", "COMPARISON", "BRACKETOPEN_PROP", 
                          "BRACKETCLOSE_PROP", "BRACKETOPEN_ARRAY", "BRACKETCLOSE_ARRAY", 
                          "BRACKETOPEN_FUNCTION", "BRACKETCLOSE_FUNCTION", 
                          "HECADECIMAL", "MULTIPLY", "DIVIDE", "ADD", "SUBTRACT", 
                          "STATEMENT_SEPARATOR" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "SCREENOPEN", "NUMBER", "LOWRES", 
                      "HIRES", "COMMA", "COMMENT", "WS", "CURSOFF", "CURSON", 
                      "INK", "TEXT", "STRING", "DO", "LOOP", "FOR", "TO", 
                      "NEXT", "IF", "ELSE", "ENDIF", "WHILE", "WEND", "PLAY", 
                      "PROC", "ENDPROC", "BAR", "WAITKEY", "KEYSTATE", "IDENTIFIER", 
                      "COMPARISON", "BRACKETOPEN_PROP", "BRACKETCLOSE_PROP", 
                      "BRACKETOPEN_ARRAY", "BRACKETCLOSE_ARRAY", "BRACKETOPEN_FUNCTION", 
                      "BRACKETCLOSE_FUNCTION", "HECADECIMAL", "MULTIPLY", 
                      "DIVIDE", "ADD", "SUBTRACT", "STATEMENT_SEPARATOR" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

AMOSLexer.EOF = antlr4.Token.EOF;
AMOSLexer.T__0 = 1;
AMOSLexer.T__1 = 2;
AMOSLexer.T__2 = 3;
AMOSLexer.T__3 = 4;
AMOSLexer.T__4 = 5;
AMOSLexer.T__5 = 6;
AMOSLexer.T__6 = 7;
AMOSLexer.T__7 = 8;
AMOSLexer.T__8 = 9;
AMOSLexer.T__9 = 10;
AMOSLexer.SCREENOPEN = 11;
AMOSLexer.NUMBER = 12;
AMOSLexer.LOWRES = 13;
AMOSLexer.HIRES = 14;
AMOSLexer.COMMA = 15;
AMOSLexer.COMMENT = 16;
AMOSLexer.WS = 17;
AMOSLexer.CURSOFF = 18;
AMOSLexer.CURSON = 19;
AMOSLexer.INK = 20;
AMOSLexer.TEXT = 21;
AMOSLexer.STRING = 22;
AMOSLexer.DO = 23;
AMOSLexer.LOOP = 24;
AMOSLexer.FOR = 25;
AMOSLexer.TO = 26;
AMOSLexer.NEXT = 27;
AMOSLexer.IF = 28;
AMOSLexer.ELSE = 29;
AMOSLexer.ENDIF = 30;
AMOSLexer.WHILE = 31;
AMOSLexer.WEND = 32;
AMOSLexer.PLAY = 33;
AMOSLexer.PROC = 34;
AMOSLexer.ENDPROC = 35;
AMOSLexer.BAR = 36;
AMOSLexer.WAITKEY = 37;
AMOSLexer.KEYSTATE = 38;
AMOSLexer.IDENTIFIER = 39;
AMOSLexer.COMPARISON = 40;
AMOSLexer.BRACKETOPEN_PROP = 41;
AMOSLexer.BRACKETCLOSE_PROP = 42;
AMOSLexer.BRACKETOPEN_ARRAY = 43;
AMOSLexer.BRACKETCLOSE_ARRAY = 44;
AMOSLexer.BRACKETOPEN_FUNCTION = 45;
AMOSLexer.BRACKETCLOSE_FUNCTION = 46;
AMOSLexer.HECADECIMAL = 47;
AMOSLexer.MULTIPLY = 48;
AMOSLexer.DIVIDE = 49;
AMOSLexer.ADD = 50;
AMOSLexer.SUBTRACT = 51;
AMOSLexer.STATEMENT_SEPARATOR = 52;



