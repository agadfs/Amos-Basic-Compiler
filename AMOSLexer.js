// Generated from AMOS.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,54,369,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,
2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,1,0,1,0,1,0,1,0,1,1,1,
1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,
6,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,
11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,3,12,160,8,12,1,12,
4,12,163,8,12,11,12,12,12,164,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,
14,1,14,1,14,1,14,1,14,1,15,1,15,1,16,1,16,5,16,184,8,16,10,16,12,16,187,
9,16,1,16,1,16,1,17,4,17,192,8,17,11,17,12,17,193,1,17,1,17,1,18,1,18,1,
18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,5,22,226,8,22,10,
22,12,22,229,9,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,
1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,
29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,
1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,34,1,
34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,
1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,
37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,5,39,
328,8,39,10,39,12,39,331,9,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,
40,3,40,342,8,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,
1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,
53,0,0,54,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,
27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,
75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,
99,50,101,51,103,52,105,53,107,54,1,0,6,1,0,48,57,2,0,10,10,13,13,3,0,9,
10,13,13,32,32,1,0,34,34,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,
122,379,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,
0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,
0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,
101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,1,109,1,0,0,0,3,113,
1,0,0,0,5,117,1,0,0,0,7,121,1,0,0,0,9,123,1,0,0,0,11,127,1,0,0,0,13,130,
1,0,0,0,15,133,1,0,0,0,17,135,1,0,0,0,19,138,1,0,0,0,21,140,1,0,0,0,23,146,
1,0,0,0,25,159,1,0,0,0,27,166,1,0,0,0,29,173,1,0,0,0,31,179,1,0,0,0,33,181,
1,0,0,0,35,191,1,0,0,0,37,197,1,0,0,0,39,206,1,0,0,0,41,214,1,0,0,0,43,218,
1,0,0,0,45,223,1,0,0,0,47,232,1,0,0,0,49,235,1,0,0,0,51,240,1,0,0,0,53,244,
1,0,0,0,55,247,1,0,0,0,57,252,1,0,0,0,59,255,1,0,0,0,61,260,1,0,0,0,63,267,
1,0,0,0,65,273,1,0,0,0,67,278,1,0,0,0,69,283,1,0,0,0,71,293,1,0,0,0,73,302,
1,0,0,0,75,306,1,0,0,0,77,315,1,0,0,0,79,325,1,0,0,0,81,341,1,0,0,0,83,343,
1,0,0,0,85,345,1,0,0,0,87,347,1,0,0,0,89,349,1,0,0,0,91,351,1,0,0,0,93,353,
1,0,0,0,95,355,1,0,0,0,97,357,1,0,0,0,99,359,1,0,0,0,101,361,1,0,0,0,103,
363,1,0,0,0,105,365,1,0,0,0,107,367,1,0,0,0,109,110,5,69,0,0,110,111,5,110,
0,0,111,112,5,100,0,0,112,2,1,0,0,0,113,114,5,83,0,0,114,115,5,105,0,0,115,
116,5,110,0,0,116,4,1,0,0,0,117,118,5,67,0,0,118,119,5,111,0,0,119,120,5,
115,0,0,120,6,1,0,0,0,121,122,5,61,0,0,122,8,1,0,0,0,123,124,5,68,0,0,124,
125,5,105,0,0,125,126,5,109,0,0,126,10,1,0,0,0,127,128,5,60,0,0,128,129,
5,62,0,0,129,12,1,0,0,0,130,131,5,62,0,0,131,132,5,61,0,0,132,14,1,0,0,0,
133,134,5,62,0,0,134,16,1,0,0,0,135,136,5,60,0,0,136,137,5,61,0,0,137,18,
1,0,0,0,138,139,5,60,0,0,139,20,1,0,0,0,140,141,5,80,0,0,141,142,5,114,0,
0,142,143,5,105,0,0,143,144,5,110,0,0,144,145,5,116,0,0,145,22,1,0,0,0,146,
147,5,83,0,0,147,148,5,99,0,0,148,149,5,114,0,0,149,150,5,101,0,0,150,151,
5,101,0,0,151,152,5,110,0,0,152,153,5,32,0,0,153,154,5,79,0,0,154,155,5,
112,0,0,155,156,5,101,0,0,156,157,5,110,0,0,157,24,1,0,0,0,158,160,5,45,
0,0,159,158,1,0,0,0,159,160,1,0,0,0,160,162,1,0,0,0,161,163,7,0,0,0,162,
161,1,0,0,0,163,164,1,0,0,0,164,162,1,0,0,0,164,165,1,0,0,0,165,26,1,0,0,
0,166,167,5,76,0,0,167,168,5,111,0,0,168,169,5,119,0,0,169,170,5,114,0,0,
170,171,5,101,0,0,171,172,5,115,0,0,172,28,1,0,0,0,173,174,5,72,0,0,174,
175,5,105,0,0,175,176,5,114,0,0,176,177,5,101,0,0,177,178,5,115,0,0,178,
30,1,0,0,0,179,180,5,44,0,0,180,32,1,0,0,0,181,185,5,39,0,0,182,184,8,1,
0,0,183,182,1,0,0,0,184,187,1,0,0,0,185,183,1,0,0,0,185,186,1,0,0,0,186,
188,1,0,0,0,187,185,1,0,0,0,188,189,6,16,0,0,189,34,1,0,0,0,190,192,7,2,
0,0,191,190,1,0,0,0,192,193,1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,
195,1,0,0,0,195,196,6,17,0,0,196,36,1,0,0,0,197,198,5,67,0,0,198,199,5,117,
0,0,199,200,5,114,0,0,200,201,5,115,0,0,201,202,5,32,0,0,202,203,5,79,0,
0,203,204,5,102,0,0,204,205,5,102,0,0,205,38,1,0,0,0,206,207,5,67,0,0,207,
208,5,117,0,0,208,209,5,114,0,0,209,210,5,115,0,0,210,211,5,32,0,0,211,212,
5,79,0,0,212,213,5,110,0,0,213,40,1,0,0,0,214,215,5,73,0,0,215,216,5,110,
0,0,216,217,5,107,0,0,217,42,1,0,0,0,218,219,5,84,0,0,219,220,5,101,0,0,
220,221,5,120,0,0,221,222,5,116,0,0,222,44,1,0,0,0,223,227,5,34,0,0,224,
226,8,3,0,0,225,224,1,0,0,0,226,229,1,0,0,0,227,225,1,0,0,0,227,228,1,0,
0,0,228,230,1,0,0,0,229,227,1,0,0,0,230,231,5,34,0,0,231,46,1,0,0,0,232,
233,5,68,0,0,233,234,5,111,0,0,234,48,1,0,0,0,235,236,5,76,0,0,236,237,5,
111,0,0,237,238,5,111,0,0,238,239,5,112,0,0,239,50,1,0,0,0,240,241,5,70,
0,0,241,242,5,111,0,0,242,243,5,114,0,0,243,52,1,0,0,0,244,245,5,84,0,0,
245,246,5,111,0,0,246,54,1,0,0,0,247,248,5,78,0,0,248,249,5,101,0,0,249,
250,5,120,0,0,250,251,5,116,0,0,251,56,1,0,0,0,252,253,5,73,0,0,253,254,
5,102,0,0,254,58,1,0,0,0,255,256,5,69,0,0,256,257,5,108,0,0,257,258,5,115,
0,0,258,259,5,101,0,0,259,60,1,0,0,0,260,261,5,69,0,0,261,262,5,110,0,0,
262,263,5,100,0,0,263,264,5,32,0,0,264,265,5,73,0,0,265,266,5,102,0,0,266,
62,1,0,0,0,267,268,5,87,0,0,268,269,5,104,0,0,269,270,5,105,0,0,270,271,
5,108,0,0,271,272,5,101,0,0,272,64,1,0,0,0,273,274,5,87,0,0,274,275,5,101,
0,0,275,276,5,110,0,0,276,277,5,100,0,0,277,66,1,0,0,0,278,279,5,80,0,0,
279,280,5,108,0,0,280,281,5,97,0,0,281,282,5,121,0,0,282,68,1,0,0,0,283,
284,5,80,0,0,284,285,5,114,0,0,285,286,5,111,0,0,286,287,5,99,0,0,287,288,
5,101,0,0,288,289,5,100,0,0,289,290,5,117,0,0,290,291,5,114,0,0,291,292,
5,101,0,0,292,70,1,0,0,0,293,294,5,69,0,0,294,295,5,110,0,0,295,296,5,100,
0,0,296,297,5,32,0,0,297,298,5,80,0,0,298,299,5,114,0,0,299,300,5,111,0,
0,300,301,5,99,0,0,301,72,1,0,0,0,302,303,5,66,0,0,303,304,5,97,0,0,304,
305,5,114,0,0,305,74,1,0,0,0,306,307,5,87,0,0,307,308,5,97,0,0,308,309,5,
105,0,0,309,310,5,116,0,0,310,311,5,32,0,0,311,312,5,75,0,0,312,313,5,101,
0,0,313,314,5,121,0,0,314,76,1,0,0,0,315,316,5,75,0,0,316,317,5,101,0,0,
317,318,5,121,0,0,318,319,5,32,0,0,319,320,5,83,0,0,320,321,5,116,0,0,321,
322,5,97,0,0,322,323,5,116,0,0,323,324,5,101,0,0,324,78,1,0,0,0,325,329,
7,4,0,0,326,328,7,5,0,0,327,326,1,0,0,0,328,331,1,0,0,0,329,327,1,0,0,0,
329,330,1,0,0,0,330,80,1,0,0,0,331,329,1,0,0,0,332,342,5,61,0,0,333,334,
5,60,0,0,334,342,5,62,0,0,335,336,5,62,0,0,336,342,5,61,0,0,337,342,5,62,
0,0,338,339,5,60,0,0,339,342,5,61,0,0,340,342,5,60,0,0,341,332,1,0,0,0,341,
333,1,0,0,0,341,335,1,0,0,0,341,337,1,0,0,0,341,338,1,0,0,0,341,340,1,0,
0,0,342,82,1,0,0,0,343,344,5,40,0,0,344,84,1,0,0,0,345,346,5,41,0,0,346,
86,1,0,0,0,347,348,5,91,0,0,348,88,1,0,0,0,349,350,5,93,0,0,350,90,1,0,0,
0,351,352,5,123,0,0,352,92,1,0,0,0,353,354,5,125,0,0,354,94,1,0,0,0,355,
356,5,36,0,0,356,96,1,0,0,0,357,358,5,42,0,0,358,98,1,0,0,0,359,360,5,47,
0,0,360,100,1,0,0,0,361,362,5,43,0,0,362,102,1,0,0,0,363,364,5,45,0,0,364,
104,1,0,0,0,365,366,5,58,0,0,366,106,1,0,0,0,367,368,5,59,0,0,368,108,1,
0,0,0,8,0,159,164,185,193,227,329,341,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class AMOSLexer extends antlr4.Lexer {

    static grammarFileName = "AMOS.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'End'", "'Sin'", "'Cos'", "'='", "'Dim'", 
                         "'<>'", "'>='", "'>'", "'<='", "'<'", "'Print'", 
                         "'Screen Open'", null, "'Lowres'", "'Hires'", "','", 
                         null, null, "'Curs Off'", "'Curs On'", "'Ink'", 
                         "'Text'", null, "'Do'", "'Loop'", "'For'", "'To'", 
                         "'Next'", "'If'", "'Else'", "'End If'", "'While'", 
                         "'Wend'", "'Play'", "'Procedure'", "'End Proc'", 
                         "'Bar'", "'Wait Key'", "'Key State'", null, null, 
                         "'('", "')'", "'['", "']'", "'{'", "'}'", "'$'", 
                         "'*'", "'/'", "'+'", "'-'", "':'", "';'" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, null, "SCREENOPEN", "NUMBER", 
                          "LOWRES", "HIRES", "COMMA", "COMMENT", "WS", "CURSOFF", 
                          "CURSON", "INK", "TEXT", "STRING", "DO", "LOOP", 
                          "FOR", "TO", "NEXT", "IF", "ELSE", "ENDIF", "WHILE", 
                          "WEND", "PLAY", "PROC", "ENDPROC", "BAR", "WAITKEY", 
                          "KEYSTATE", "IDENTIFIER", "COMPARISON", "BRACKETOPEN_PROP", 
                          "BRACKETCLOSE_PROP", "BRACKETOPEN_ARRAY", "BRACKETCLOSE_ARRAY", 
                          "BRACKETOPEN_FUNCTION", "BRACKETCLOSE_FUNCTION", 
                          "HECADECIMAL", "MULTIPLY", "DIVIDE", "ADD", "SUBTRACT", 
                          "STATEMENT_SEPARATOR", "FINISH_AND_ADD_OTHER_STATEMENT" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "T__10", "SCREENOPEN", "NUMBER", 
                      "LOWRES", "HIRES", "COMMA", "COMMENT", "WS", "CURSOFF", 
                      "CURSON", "INK", "TEXT", "STRING", "DO", "LOOP", "FOR", 
                      "TO", "NEXT", "IF", "ELSE", "ENDIF", "WHILE", "WEND", 
                      "PLAY", "PROC", "ENDPROC", "BAR", "WAITKEY", "KEYSTATE", 
                      "IDENTIFIER", "COMPARISON", "BRACKETOPEN_PROP", "BRACKETCLOSE_PROP", 
                      "BRACKETOPEN_ARRAY", "BRACKETCLOSE_ARRAY", "BRACKETOPEN_FUNCTION", 
                      "BRACKETCLOSE_FUNCTION", "HECADECIMAL", "MULTIPLY", 
                      "DIVIDE", "ADD", "SUBTRACT", "STATEMENT_SEPARATOR", 
                      "FINISH_AND_ADD_OTHER_STATEMENT" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

AMOSLexer.EOF = antlr4.Token.EOF;
AMOSLexer.T__0 = 1;
AMOSLexer.T__1 = 2;
AMOSLexer.T__2 = 3;
AMOSLexer.T__3 = 4;
AMOSLexer.T__4 = 5;
AMOSLexer.T__5 = 6;
AMOSLexer.T__6 = 7;
AMOSLexer.T__7 = 8;
AMOSLexer.T__8 = 9;
AMOSLexer.T__9 = 10;
AMOSLexer.T__10 = 11;
AMOSLexer.SCREENOPEN = 12;
AMOSLexer.NUMBER = 13;
AMOSLexer.LOWRES = 14;
AMOSLexer.HIRES = 15;
AMOSLexer.COMMA = 16;
AMOSLexer.COMMENT = 17;
AMOSLexer.WS = 18;
AMOSLexer.CURSOFF = 19;
AMOSLexer.CURSON = 20;
AMOSLexer.INK = 21;
AMOSLexer.TEXT = 22;
AMOSLexer.STRING = 23;
AMOSLexer.DO = 24;
AMOSLexer.LOOP = 25;
AMOSLexer.FOR = 26;
AMOSLexer.TO = 27;
AMOSLexer.NEXT = 28;
AMOSLexer.IF = 29;
AMOSLexer.ELSE = 30;
AMOSLexer.ENDIF = 31;
AMOSLexer.WHILE = 32;
AMOSLexer.WEND = 33;
AMOSLexer.PLAY = 34;
AMOSLexer.PROC = 35;
AMOSLexer.ENDPROC = 36;
AMOSLexer.BAR = 37;
AMOSLexer.WAITKEY = 38;
AMOSLexer.KEYSTATE = 39;
AMOSLexer.IDENTIFIER = 40;
AMOSLexer.COMPARISON = 41;
AMOSLexer.BRACKETOPEN_PROP = 42;
AMOSLexer.BRACKETCLOSE_PROP = 43;
AMOSLexer.BRACKETOPEN_ARRAY = 44;
AMOSLexer.BRACKETCLOSE_ARRAY = 45;
AMOSLexer.BRACKETOPEN_FUNCTION = 46;
AMOSLexer.BRACKETCLOSE_FUNCTION = 47;
AMOSLexer.HECADECIMAL = 48;
AMOSLexer.MULTIPLY = 49;
AMOSLexer.DIVIDE = 50;
AMOSLexer.ADD = 51;
AMOSLexer.SUBTRACT = 52;
AMOSLexer.STATEMENT_SEPARATOR = 53;
AMOSLexer.FINISH_AND_ADD_OTHER_STATEMENT = 54;



