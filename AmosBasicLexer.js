// Generated from AMOS.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,32,228,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,0,1,0,1,0,1,0,1,0,
1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,
1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,
1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,
12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,
17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,5,19,178,8,19,10,19,12,19,181,
9,19,1,19,1,19,1,20,4,20,186,8,20,11,20,12,20,187,1,21,1,21,5,21,192,8,21,
10,21,12,21,195,9,21,1,21,1,21,1,22,1,22,5,22,201,8,22,10,22,12,22,204,9,
22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,4,29,
219,8,29,11,29,12,29,220,1,29,1,29,1,30,1,30,1,31,1,31,1,193,0,32,1,1,3,
2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,
28,57,29,59,30,61,31,63,32,1,0,5,2,0,10,10,13,13,1,0,48,57,3,0,65,90,95,
95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,232,0,1,1,0,
0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,
0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,1,65,1,0,0,0,3,77,1,0,0,0,5,86,1,
0,0,0,7,90,1,0,0,0,9,95,1,0,0,0,11,98,1,0,0,0,13,107,1,0,0,0,15,111,1,0,
0,0,17,116,1,0,0,0,19,119,1,0,0,0,21,124,1,0,0,0,23,130,1,0,0,0,25,135,1,
0,0,0,27,145,1,0,0,0,29,154,1,0,0,0,31,158,1,0,0,0,33,163,1,0,0,0,35,167,
1,0,0,0,37,170,1,0,0,0,39,175,1,0,0,0,41,185,1,0,0,0,43,189,1,0,0,0,45,198,
1,0,0,0,47,205,1,0,0,0,49,207,1,0,0,0,51,209,1,0,0,0,53,211,1,0,0,0,55,213,
1,0,0,0,57,215,1,0,0,0,59,218,1,0,0,0,61,224,1,0,0,0,63,226,1,0,0,0,65,66,
5,83,0,0,66,67,5,99,0,0,67,68,5,114,0,0,68,69,5,101,0,0,69,70,5,101,0,0,
70,71,5,110,0,0,71,72,5,32,0,0,72,73,5,79,0,0,73,74,5,112,0,0,74,75,5,101,
0,0,75,76,5,110,0,0,76,2,1,0,0,0,77,78,5,67,0,0,78,79,5,117,0,0,79,80,5,
114,0,0,80,81,5,115,0,0,81,82,5,32,0,0,82,83,5,79,0,0,83,84,5,102,0,0,84,
85,5,102,0,0,85,4,1,0,0,0,86,87,5,73,0,0,87,88,5,110,0,0,88,89,5,107,0,0,
89,6,1,0,0,0,90,91,5,84,0,0,91,92,5,101,0,0,92,93,5,120,0,0,93,94,5,116,
0,0,94,8,1,0,0,0,95,96,5,68,0,0,96,97,5,111,0,0,97,10,1,0,0,0,98,99,5,87,
0,0,99,100,5,97,0,0,100,101,5,105,0,0,101,102,5,116,0,0,102,103,5,32,0,0,
103,104,5,75,0,0,104,105,5,101,0,0,105,106,5,121,0,0,106,12,1,0,0,0,107,
108,5,70,0,0,108,109,5,111,0,0,109,110,5,114,0,0,110,14,1,0,0,0,111,112,
5,78,0,0,112,113,5,101,0,0,113,114,5,120,0,0,114,115,5,116,0,0,115,16,1,
0,0,0,116,117,5,73,0,0,117,118,5,102,0,0,118,18,1,0,0,0,119,120,5,69,0,0,
120,121,5,108,0,0,121,122,5,115,0,0,122,123,5,101,0,0,123,20,1,0,0,0,124,
125,5,87,0,0,125,126,5,104,0,0,126,127,5,105,0,0,127,128,5,108,0,0,128,129,
5,101,0,0,129,22,1,0,0,0,130,131,5,87,0,0,131,132,5,101,0,0,132,133,5,110,
0,0,133,134,5,100,0,0,134,24,1,0,0,0,135,136,5,80,0,0,136,137,5,114,0,0,
137,138,5,111,0,0,138,139,5,99,0,0,139,140,5,101,0,0,140,141,5,100,0,0,141,
142,5,117,0,0,142,143,5,114,0,0,143,144,5,101,0,0,144,26,1,0,0,0,145,146,
5,69,0,0,146,147,5,110,0,0,147,148,5,100,0,0,148,149,5,32,0,0,149,150,5,
80,0,0,150,151,5,114,0,0,151,152,5,111,0,0,152,153,5,99,0,0,153,28,1,0,0,
0,154,155,5,69,0,0,155,156,5,110,0,0,156,157,5,100,0,0,157,30,1,0,0,0,158,
159,5,80,0,0,159,160,5,108,0,0,160,161,5,97,0,0,161,162,5,121,0,0,162,32,
1,0,0,0,163,164,5,66,0,0,164,165,5,97,0,0,165,166,5,114,0,0,166,34,1,0,0,
0,167,168,5,84,0,0,168,169,5,111,0,0,169,36,1,0,0,0,170,171,5,76,0,0,171,
172,5,111,0,0,172,173,5,111,0,0,173,174,5,112,0,0,174,38,1,0,0,0,175,179,
5,39,0,0,176,178,8,0,0,0,177,176,1,0,0,0,178,181,1,0,0,0,179,177,1,0,0,0,
179,180,1,0,0,0,180,182,1,0,0,0,181,179,1,0,0,0,182,183,6,19,0,0,183,40,
1,0,0,0,184,186,7,1,0,0,185,184,1,0,0,0,186,187,1,0,0,0,187,185,1,0,0,0,
187,188,1,0,0,0,188,42,1,0,0,0,189,193,5,34,0,0,190,192,9,0,0,0,191,190,
1,0,0,0,192,195,1,0,0,0,193,194,1,0,0,0,193,191,1,0,0,0,194,196,1,0,0,0,
195,193,1,0,0,0,196,197,5,34,0,0,197,44,1,0,0,0,198,202,7,2,0,0,199,201,
7,3,0,0,200,199,1,0,0,0,201,204,1,0,0,0,202,200,1,0,0,0,202,203,1,0,0,0,
203,46,1,0,0,0,204,202,1,0,0,0,205,206,5,61,0,0,206,48,1,0,0,0,207,208,5,
44,0,0,208,50,1,0,0,0,209,210,5,91,0,0,210,52,1,0,0,0,211,212,5,93,0,0,212,
54,1,0,0,0,213,214,5,123,0,0,214,56,1,0,0,0,215,216,5,125,0,0,216,58,1,0,
0,0,217,219,7,4,0,0,218,217,1,0,0,0,219,220,1,0,0,0,220,218,1,0,0,0,220,
221,1,0,0,0,221,222,1,0,0,0,222,223,6,29,0,0,223,60,1,0,0,0,224,225,5,43,
0,0,225,62,1,0,0,0,226,227,5,45,0,0,227,64,1,0,0,0,6,0,179,187,193,202,220,
1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class AmosBasicLexer extends antlr4.Lexer {

    static grammarFileName = "AMOS.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'Screen Open'", "'Curs Off'", "'Ink'", "'Text'", 
                         "'Do'", "'Wait Key'", "'For'", "'Next'", "'If'", 
                         "'Else'", "'While'", "'Wend'", "'Procedure'", "'End Proc'", 
                         "'End'", "'Play'", "'Bar'", "'To'", "'Loop'", null, 
                         null, null, null, "'='", "','", "'['", "']'", "'{'", 
                         "'}'", null, "'+'", "'-'" ];
	static symbolicNames = [ null, "SCREENOPEN", "CURSOFF", "INK", "TEXT", 
                          "DO", "WAITKEY", "FOR", "NEXT", "IF", "ELSE", 
                          "WHILE", "WEND", "PROCEDURE", "ENDPROC", "END", 
                          "PLAY", "BAR", "TO", "LOOP", "COMMENT", "NUMBER", 
                          "STRING", "VAR", "ASSIGN", "COMMA", "LPAREN", 
                          "RPAREN", "LBRACE", "RBRACE", "WS", "PLUS", "MINUS" ];
	static ruleNames = [ "SCREENOPEN", "CURSOFF", "INK", "TEXT", "DO", "WAITKEY", 
                      "FOR", "NEXT", "IF", "ELSE", "WHILE", "WEND", "PROCEDURE", 
                      "ENDPROC", "END", "PLAY", "BAR", "TO", "LOOP", "COMMENT", 
                      "NUMBER", "STRING", "VAR", "ASSIGN", "COMMA", "LPAREN", 
                      "RPAREN", "LBRACE", "RBRACE", "WS", "PLUS", "MINUS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

AmosBasicLexer.EOF = antlr4.Token.EOF;
AmosBasicLexer.SCREENOPEN = 1;
AmosBasicLexer.CURSOFF = 2;
AmosBasicLexer.INK = 3;
AmosBasicLexer.TEXT = 4;
AmosBasicLexer.DO = 5;
AmosBasicLexer.WAITKEY = 6;
AmosBasicLexer.FOR = 7;
AmosBasicLexer.NEXT = 8;
AmosBasicLexer.IF = 9;
AmosBasicLexer.ELSE = 10;
AmosBasicLexer.WHILE = 11;
AmosBasicLexer.WEND = 12;
AmosBasicLexer.PROCEDURE = 13;
AmosBasicLexer.ENDPROC = 14;
AmosBasicLexer.END = 15;
AmosBasicLexer.PLAY = 16;
AmosBasicLexer.BAR = 17;
AmosBasicLexer.TO = 18;
AmosBasicLexer.LOOP = 19;
AmosBasicLexer.COMMENT = 20;
AmosBasicLexer.NUMBER = 21;
AmosBasicLexer.STRING = 22;
AmosBasicLexer.VAR = 23;
AmosBasicLexer.ASSIGN = 24;
AmosBasicLexer.COMMA = 25;
AmosBasicLexer.LPAREN = 26;
AmosBasicLexer.RPAREN = 27;
AmosBasicLexer.LBRACE = 28;
AmosBasicLexer.RBRACE = 29;
AmosBasicLexer.WS = 30;
AmosBasicLexer.PLUS = 31;
AmosBasicLexer.MINUS = 32;



